/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Complaints;

import Model.Business.Business;
import Model.Complaint.Complaint;
import Model.Complaint.ComplaintDirectory;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author athar
 */
public class AllComplaints extends javax.swing.JPanel {
    private ComplaintDirectory complaintDirectory;


    /**
     * Creates new form AllComplaints
     */
    public AllComplaints(ComplaintDirectory complaintDirectory, JPanel userProcessContainer, Business business) {
        initComponents();
        
        this.complaintDirectory = complaintDirectory;
        populateComplaintsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableComplaints = new javax.swing.JTable();

        setBackground(new java.awt.Color(54, 116, 99));

        jTableComplaints.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Details", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableComplaints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(171, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(180, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableComplaints;
    // End of variables declaration//GEN-END:variables

    private void populateComplaintsTable() {
        DefaultTableModel model = (DefaultTableModel) jTableComplaints.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Complaint complaint : complaintDirectory.getComplaints()) {
            System.out.println("Number of complaints: " + complaintDirectory.getComplaints().size());

            Object[] row = new Object[3];
            row[0] = complaint.getComplaintId();
            row[1] = complaint.getDetails();
            row[2] = complaint.isResolved(); // Assuming there is a boolean field for status
            model.addRow(row);
        }
    }
}
